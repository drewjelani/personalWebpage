{"version":3,"sources":["serviceWorker.js","components/container.js","components/header.js","pages/Software.js","pages/Amaiya.js","pages/Home.js","pages/About.js","index.js"],"names":["Boolean","window","location","hostname","match","Container","content","this","props","className","map","index","generateRowCss","rowSize","key","text","React","Component","convertIntToText","int","Header","ContainerContent","of","to","Software","Amaiya","Home","About","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCChBAC,E,uKAEE,IAAMC,EAAUC,KAAKC,MAAMF,QAE3B,OAAO,yBAAKG,UAAW,aACnB,yBAAKA,UAAW,OACXH,EAAQI,KAAI,SAACJ,EAASK,GAAV,OACT,yBAAKF,UAAWG,EAAeN,EAAQO,SAAUC,IAAKH,GACjDL,EAAQS,e,GARTC,IAAMC,WAgBxBL,EAAiB,SAAAD,GAAK,OACd,IAAVA,EACMO,EAAiBP,GAAS,UAC1BO,EAAiBP,GAAS,YAE9BO,EAAmB,SAAAC,GACrB,OAAOA,GACH,KAAK,EAAG,MAAO,MACf,KAAK,EAAG,MAAO,MACf,KAAK,EAAG,MAAO,QACf,KAAK,EAAG,MAAO,OACf,KAAK,EAAG,MAAO,OACf,KAAK,EAAG,MAAO,MACf,KAAK,EAAG,MAAO,QACf,KAAK,EAAG,MAAO,QACf,KAAK,EAAG,MAAO,OACf,KAAK,GAAI,MAAO,MAChB,KAAK,GAAI,MAAO,SAChB,KAAK,GAAI,MAAO,SAChB,QAAS,MAAO,UAITd,ICrCTe,E,uKAEE,IAAMd,EAAU,CACZe,EAAiBC,GAAG,EAAG,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACvBF,EAAiBC,GAAG,EAAG,kBAAC,IAAD,CAAMC,GAAG,UAAT,UACvBF,EAAiBC,GAAG,EAAE,kBAAC,IAAD,CAAMC,GAAG,QAAT,yBACtBF,EAAiBC,GAAG,EAAE,kBAAC,IAAD,CAAMC,GAAG,WAAT,YAE1B,OAAO,kBAAC,EAAD,CAAWjB,QAASA,Q,GARdU,IAAMC,WAYrBI,E,WACF,WAAYR,EAASE,GAAO,oBACxBR,KAAKM,QAAUA,EACfN,KAAKQ,KAAOA,E,oDAGNF,EAASE,GACf,OAAO,IAAIM,EAAiBR,EAASE,O,KAI9BK,ICbAI,EAXE,WACb,OACI,yBAAKf,UAAU,aACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACX,qCCMDgB,EAXA,WACX,OACI,yBAAKhB,UAAU,aACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACX,wCCWDiB,EAhBF,WACT,OACI,yBAAKjB,UAAU,aACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACX,8EAGA,mCACS,4CADT,2BCGDkB,EAXD,WACV,OACI,yBAAKlB,UAAU,aACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACX,uCCIVmB,EACF,kBAAC,IAAD,KACI,6BACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,OAAOC,UAAWP,IAC9B,kBAAC,IAAD,CAAOM,KAAK,UAAUC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,SAASC,UAAWJ,MAK5CK,IAASC,OACPL,EACAM,SAASC,eAAe,SP0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75d7d110.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nclass Container extends React.Component {\n    render() {\n        const content = this.props.content;\n\n        return <div className={'container'}>\n            <div className={'row'}>\n                {content.map((content, index) =>\n                    <div className={generateRowCss(content.rowSize)} key={index}>\n                        {content.text}\n                    </div>)\n                }\n            </div>\n        </div>\n    }\n}\n\nconst generateRowCss = index =>\n    index === 1\n        ? convertIntToText(index) + ' column'\n        : convertIntToText(index) + ' columns';\n\nconst convertIntToText = int => {\n    switch(int) {\n        case 1: return \"one\";\n        case 2: return \"two\";\n        case 3: return \"three\";\n        case 4: return \"four\";\n        case 5: return \"five\";\n        case 6: return \"six\";\n        case 7: return \"seven\";\n        case 8: return \"eight\";\n        case 9: return \"nine\";\n        case 10: return \"ten\";\n        case 11: return \"eleven\";\n        case 12: return \"twelve\";\n        default: return \"ERROR\";\n    }\n};\n\nexport default Container;","import React from 'react';\nimport Container from \"./container\";\nimport {Link} from \"react-router-dom\";\n\nclass Header extends React.Component {\n    render() {\n        const content = [\n            ContainerContent.of(3, <Link to=\"/\">Home</Link>),\n            ContainerContent.of(3, <Link to='/about'>About</Link>),\n            ContainerContent.of(3,<Link to=\"/sde\">Software Engineering</Link>),\n            ContainerContent.of(3,<Link to=\"/amaiya\">Amaiya</Link>)];\n\n        return <Container content={content}/>;\n    }\n}\n\nclass ContainerContent{\n    constructor(rowSize, text) {\n        this.rowSize = rowSize;\n        this.text = text;\n    }\n\n    static of(rowSize, text){\n        return new ContainerContent(rowSize, text);\n    }\n}\n\nexport default Header;","import React from 'react';\nimport Header from \"../components/header\";\n\nconst Software = () => {\n    return (\n        <div className='container'>\n            <Header/>\n            <div className='container'>\n                <p>SDE</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Software;","import React from 'react';\nimport Header from \"../components/header\";\n\nconst Amaiya = () => {\n    return (\n        <div className='container'>\n            <Header/>\n            <div className='container'>\n                <p>Amaiya</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Amaiya;","import React from 'react';\nimport Header from \"../components/header\";\n\nconst Home = () => {\n    return (\n        <div className=\"container\">\n            <Header/>\n            <div className=\"container\">\n                <p>\n                    This is the start of Drew's page.  Coming soon!\n                </p>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n            </div>\n        </div>\n    )\n};\n\nexport default Home;","import React from 'react';\nimport Header from \"../components/header\";\n\nconst About = () => {\n    return (\n        <div className='container'>\n            <Header/>\n            <div className='container'>\n                <p>About</p>\n            </div>\n        </div>\n    )\n};\n\nexport default About;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './normalize.css';\nimport './skeleton.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Software from \"./pages/Software\";\nimport Amaiya from \"./pages/Amaiya\";\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\n\nconst routing = (\n    <Router>\n        <div>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/sde\" component={Software} />\n            <Route path=\"/amaiya\" component={Amaiya} />\n            <Route path=\"/about\" component={About} />\n        </div>\n    </Router>\n);\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}